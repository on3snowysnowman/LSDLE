# Version 1.2

 CHANGES:

 - Began implementing a DelayedTextHandler.h
 
 - Added a method to the Window and ConsoleOutputHandler class for getting
   their height in characters

 = Added a method to the Window and ConsoleOutputHandler class for 
   converting a pixel position to the equivalent number of characters

 - Changed the functionality of the MenuToolButton,  which now allows the user
   to assign a function instance to a MenuToolButton, for custom logic when a 
   button is pressed

 - Changed the name of the name of the enum for different MenuToolItem types 
   from "ItemType" to "MenuToolItemType". This should reduce the amount of 
   naming collisions that might happen when using the LSDLE.

 FIXES:

  - Fixed bug where the ConsoleOutputHandler's anchor wouldn't reset to 0 when 
    the reset_cursor_position method was called

  - Fixed ConsoleOutputHandler not calculating screen_character_height

# Version 1.1

 CHANGES:

 - Reconfigured the MenuHandler to be a public static class so individual menus
   can now automatically register themselves with the MenuHandler, along with 
   requesting instances of individual registered menus of different menu 
   classes.

 - The LSDLE engine now has static pointers to the InputHandler and 
   TextureHandler, along with public static methods to fetch these. This allows
   anything that needs these two crucial objects to simply include the LSDLE.h 
   file and request these. 

 - Created a "Window" class. This Window class will make it much easier for 
   users to work with text and sprites on the screen, without having to 
   manually create an object for the ConsoleOutputHandler and 
   TextDisplayHandler. 

 - Each Menu instance now automatically creates a Window class for itself, so 
   anything that needs to be added to the screen should simply be called by 
   each Menu's window.

 - Created a "WindowManager" class. This is entirely handled by the LSDLE 
   engine, and its sole purpose is to track every window that exists during 
   runtime and render it each frame. This means that the user will not have to
   worry about rendering their window each frame. All that needs to be done is
   to add content to it, and the rendering will be handled by the engine.

 - Created an EventSystem for the Engine. This allows any object to 
   "subscribe" to the EventSystem and pass a void return function instance
   that they would like to be run when said event is triggered.

 - Added an "anchoring" system to the ConsoleOutputHandler. This allows the 
   user to determine where the x position of the cursor should be placed when
   a newline is called. This is especially useful when outputting to the 
   middle of the screen, and simply wanted to input a new line and have it be
   placed at the beginning of the place in the middle of the screen that they
   are rendering to.

 - Added a render_colored_number to the MenuTools.

 - Changed the MenuToolButton to render its brackets surrounding the button
   name as white, and not the color of the button.

 - Added a get_choice method to the MenuToolChoice to get the string that is
   currently chosen 

 - Configured the MenuTools in the simulate menu method to autmoatically block
   the enter key if the selected item is of type CHOICE, LIST, or TEXT_LIST

 - Added a fetch_int feature to the MenuToolVariable to handle converting its
   content to an integer, and handling an overflow error if it happens
  
 - Added a LNumericLimits file that contains the numeric limit of a uint16_t

 - Added addition handling in the LMath file that can check for an overflow
   between two uint16_ts and handle it accordingly

 - Added a LStringManip file for string manipulation. 

 FIXES:

 - Fixed a bug where MenuTools menu and list simulation would crash if empty
   content was passed to it through the DataContainers

 - Fixed MenuToolChoice so that it now checks for available keys in its
   input handling instead of raw keys

 - Fixed bug in MenuToolChoice where moving the cursor down with shift+s would
   place the cursor index out of bounds

 - Fixed a bug where if a MenuToolVariable's content's is left empty, the input
   handling function for that variable will not be set and will crash when 
   called.



# Version 1.0.3

  - Configured SpriteHandler to have a sprite size multiplier for changing
    the size output of sprites  

  - Added a Coordinate.h file that provides a basic Coordinate class for 
    storing two uint16_ts

  - Reconfigured SpriteHandler to use a DataContainer for storing the 
    rendering data for sprites so that a single sprite can now be rendered
    multiple times to the screen in one frame

  - Added docstring to JsonLoader

  - Added the 'const' and 'final' modifier to many functions where it was
    applicable

  - Fixed issue where some methods still called the old "does_file_exist"
    name from the Debug class.
  
  - Updated the documentation inside the MenuToolItem and their derived 
    class's files.

  - Updated the documentation inside the LSDLE.h file

# Version 1.0.2

  - Renamed the Debug's "does_file_exist" method to "does_directory_exist" 
    to better reflect its function.

# Version 1.0.1

  - Tweaked the way Sprites are created. The Sprites will now be created from
    the SpriteHandler, with each Sprite containing purely the source and 
    destination data along with its texture. Sprites created by themselves 
    will not contain a valid texture
  
  - Reconfigured the privacy of some members in the LSDLE itself. Added get 
    methods to the engine for retrieving screen width and height

# Version 1.0 

  - Release Version.
